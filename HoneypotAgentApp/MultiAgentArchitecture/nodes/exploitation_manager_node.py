import state
from prompts import exploitation_plan_prompt
from .node_utils import llm
import json
from openai import BadRequestError
import logging
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def exploitation_manager(state: state.HoneypotStateReact):
    """
    Decides which honeypot(s) to expose next based on current attack graph
    """
    logger.info("Exploitation Agent")
    
    prompt = exploitation_plan_prompt.EXPLOITATION_PLAN_PROMPT.format(
        available_honeypots=state.honeypot_config,
        firewall_config=state.firewall_config,
        honeypots_exploitations=state.honeypots_exploitation,
        memory_context=state.memory_context
    )
    
    try:
        response = await llm.ainvoke(prompt) 
        content = response.content
        substring = content.split("Reasoning:")
        substring = substring[1] if len(substring) > 1 else substring
        reasoning, substring1 = substring.split("Plan:")
        plan, substring2 = substring1.split("Exposed Honeypots:")
        currently_exposed, lockdown = substring2.split("Lockdown:")
        plan = json.loads(plan)
        currently_exposed = json.loads(currently_exposed)
        lockdown = "ACTIVE" if "true" in lockdown.lower() else "INACTIVE"
        return {
            "messages":state.messages + [response],
            "exploitation_strategy": plan,
            "reasoning_exploitation": [reasoning],
            "currently_exposed":currently_exposed,
            "lockdown_status":lockdown
            }
    except BadRequestError as e:
        logger.error(f"Error: {e}")
    except Exception as e:
        logger.error(f"Error during json parsing of response in Exploitation Manager\n{e}")

    return {
        "messages":state.messages + [response],
        "exploitation_strategy": f"Exploitation Strategy\n{response.content}",
        "reasoning_exploitation": f"{response.content}"
        }
    
