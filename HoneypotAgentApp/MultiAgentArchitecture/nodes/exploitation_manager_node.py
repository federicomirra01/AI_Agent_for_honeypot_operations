import state
from prompts import exploitation_plan_prompt
from .node_utils import OPEN_AI_KEY
from openai import BadRequestError
import logging
from pydantic import BaseModel
import instructor
from openai import OpenAI

class StructuredOutput(BaseModel):
    reasoning: str
    plan: dict
    exposed_honeypots: dict
    lockdown: bool

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def exploitation_manager(state: state.HoneypotStateReact):
    """
    Decides which honeypot(s) to expose next based on current attack graph
    """
    logger.info("Exploitation Agent")
    
    prompt = exploitation_plan_prompt.EXPLOITATION_PLAN_PROMPT.substitute(
        available_honeypots=state.honeypot_config,
        firewall_config=state.firewall_config,
        honeypots_exploitations=state.honeypots_exploitation,
        memory_context=state.memory_context
    )
    
    try:
        messages = {"role":"system", "content": prompt}
        agent = instructor.from_openai(OpenAI(api_key=OPEN_AI_KEY))
        response = agent.chat.completions.create(
            model='gpt-4.1',
            response_model=StructuredOutput,
            messages=[messages]
        )
        message = ""
        message += str(response.plan) + "\n"
        message += str(response.reasoning) + "\n"
        message += str(response.exposed_honeypots) + "\n"
        message += str(response.lockdown) + "\n"
        return {
            "messages":state.messages + [message],
            "exploitation_strategy": response.plan,
            "reasoning_exploitation": response.reasoning,
            "currently_exposed":response.exposed_honeypots,
            "lockdown_status":response.lockdown
            }
    except BadRequestError as e:
        logger.error(f"Error: {e}")
    except Exception as e:
        logger.error(f"Error during json parsing of response in Exploitation Manager\n{e}")

    return {
        "messages":state.messages + [message],
        }
    
